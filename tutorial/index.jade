.chapter(data-title='Employee Directory Servlet')
  .step(
    data-title='What Are We Building?',
    data-file='src/main/webapp/index.jsp')
    :markdown
      ## Employee Directory

      Learn how to implement an employee directory that you can query using SMS.
      Request information from anyone at your company just by sending a text message
      to a [Twilio Number](//www.twilio.com/help/faq/phone-numbers)

      Here is how it works at a high level:

      - The user sends a SMS with an Employee's name to the Twilio number.
      - The user receives information for the requested Employee.

      Let's get started!

      ---

      **See Also:**
      * [Getting started with the Twilio Java Helper Library](https://www.twilio.com/docs/libraries/java)

  .step(
    data-title="Handling Twilio's SMS Request",
    data-file='src/main/java/com/twilio/employeedirectory/application/servlet/EmployeeDirectoryServlet.java',
    data-highlight='34-58')
    :markdown
      ## Handling Twilio's SMS Request

      When your [Twilio Number](//www.twilio.com/help/faq/phone-numbers) receives
      an SMS, Twilio will make a POST request to `/directory/search` asking for [TwiML]
      instructions.

      Once the application identifies one of the 3 possible scenarios
      (pefect match, multiple partial match or no match),
      it will send a [TwiML] response to Twilio. This response will instruct Twilio
      to send an SMS [Message](//www.twilio.com/docs/api/twiml/sms/message)
      back to the user.

      Let's take a closer look to each one of the scenarios.

      [TwiML]: //www.twilio.com/docs/api/twiml

  .step(
    data-title="Exact Match",
    data-file='src/main/java/com/twilio/employeedirectory/domain/query/PerfectMatch.java',
    data-highlight='6-42')
    :markdown
      ## Finding an Exact Employee Match

      This is the simplest scenario. We query our database expecting to find an
      employee whose name is whole or partially like the one specified in the SMS sent to our Twilio number. If a single match is found, a message containing
      this employee's information is built and sent back to Twilio as TwiML instructions.

      Our next possible scenario is when more than one employee matches.

      ---

      **See Also:**
      * [How we iterate over possible matching scenarios](//github.com/TwilioDevEd/employee-directory-servlets/blob/master/src/main/java/com/twilio/employeedirectory/domain/service/EmployeeDirectoryServiceImpl.java)

  .step(
    data-title="Multiple Matches",
    data-file='src/main/java/com/twilio/employeedirectory/domain/query/MultipleMatch.java',
    data-highlight='12-57')
    :markdown
      ## Finding Multiple Employee Matches

      Now we'll try to get a partial match that returns more than one result. We need to
      store a List of `BasicNameValuePair` containing index suggestions so that the user can reply with a number
      that references one of the suggestions in order to get all the employee's information.
      We'll use [Twilio Cookies](https://www.twilio.com/blog/2014/07/the-definitive-guide-to-sms-conversation-tracking.html) to store the suggestions.

      **See Also:**
      * [Java Servlet Cookies](//api.rubyonrails.org/classes/ActionDispatch/Cookies.html)
      * [How we iterate over possible matching scenarios](//github.com/TwilioDevEd/employee-directory-servlets/blob/master/src/main/java/com/twilio/employeedirectory/domain/service/EmployeeDirectoryServiceImpl.java)

  .step(
    data-title="No Match",
    data-file='src/main/java/com/twilio/employeedirectory/domain/query/NoMatch.java',
    data-highlight='3-14')
    :markdown
      ## Finding No Employee Match

      The last scenario is so simple that a step won't be created for it. If none
      of the previous scenarios occur, it means that there is no employee in the
      database that matches the user's query. In that case, a reply will be sent
      to the user explaining that their query doesn't match any of the employees
      found on the database.

      ---

      **See Also:**
      * [How we iterate over possible matching scenarios](//github.com/TwilioDevEd/employee-directory-servlets/blob/master/src/main/java/com/twilio/employeedirectory/domain/service/EmployeeDirectoryServiceImpl.java)

  .step(
    data-title="Storing Suggestions With Cookies",
    data-file='src/main/java/com/twilio/employeedirectory/application/servlet/EmployeeDirectoryServlet.java',
    data-highlight='45-51')
    :markdown
      ## Storing Suggestions With Cookies

      When a user gets a multiple match by searching the employee directory, we
      reply with multiple indexed suggestions. We need to store this suggestions, so the
      next time the user sends an SMS we know this is not a query for a new employee,
      but a selection of one of the suggestions.

      We'll use [Twilio Cookies][Twilio Cookies] to store suggestions. They will allow
      you to keep track of an SMS conversation between multiple numbers and your Twilio
      powered application.

      [Twilio Cookies]: https://www.twilio.com/blog/2014/07/the-definitive-guide-to-sms-conversation-tracking.html

  .step
    :markdown
      ## Where to next?

      That's it! We have just implemented an employee directory using Java with servlets.
      Now you can get your employee's information by texting a Twilio number.

      If you're a Java developer working with Twilio, you might also enjoy these
      tutorials:

      [**Browser-Calls**](//www.twilio.com/docs/tutorials/walkthrough/browser-calls/java/servlet)

      Learn how to use Twilio Client to make browser-to-phone and browser-to-browser calls with ease.

      [**ETA-Notifications**](//www.twilio.com/docs/tutorials/walkthrough/eta-notifications/java/servlet)

      Learn how to implement ETA Notifications using Java with servlets and Twilio.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
